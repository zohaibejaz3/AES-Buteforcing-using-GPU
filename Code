#include <stdio.h>
#include <cstdlib>
#include <cuda.h>
#include <stdlib.h>
#include <iomanip>
#include <iostream>
#include <fstream>
#include <cstring>
using namespace std;

#define GPUThreadsPerBlock 512 //1024
#define GPUBlocks 4096 //4096

#define Check_Dictionary 0 // 1 is true
#define Lenght_of_Words 18
#define Number_of_Words 15000

__device__
#define BYTE uint8_t

__device__
#define STATE uint8_t

//__device__
//BYTE KEYWORD[176];

__device__
const uint8_t sbox[256] = {
	//0     1    2      3     4    5     6     7      8    9     A      B    C     D     E     F
	0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
	0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
	0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
	0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
	0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
	0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
	0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
	0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
	0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
	0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
	0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
	0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
	0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
	0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
	0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
	0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 };

__device__
const uint8_t rsbox[256] = {
	0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
	0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
	0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
	0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
	0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
	0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
	0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
	0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
	0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
	0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
	0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
	0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
	0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
	0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
	0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
	0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d };

__device__
const uint8_t mixcolumnbox[4][4] = {
	0x2, 0x3, 0x1, 0x1,
	0x1, 0x2, 0x3, 0x1,
	0x1, 0x1, 0x2, 0x3,
	0x3, 0x1, 0x1, 0x2 };

__device__
const uint8_t RCon[40] = {
	0x01, 0x00, 0x00, 0x00,
	0x02, 0x00, 0x00, 0x00,
	0x04, 0x00, 0x00, 0x00,
	0x08, 0x00, 0x00, 0x00,
	0x10, 0x00, 0x00, 0x00,
	0x20, 0x00, 0x00, 0x00,
	0x40, 0x00, 0x00, 0x00,
	0x80, 0x00, 0x00, 0x00,
	0x1b, 0x00, 0x00, 0x00,
	0x36, 0x00, 0x00, 0x00
};

__device__
static uint8_t getSBoxValue(uint8_t num)
{
	return sbox[num];
}

__device__
static uint8_t getRSBoxValue(uint8_t num)
{
	return rsbox[num];
}

__device__
void SubBytes(STATE state[4][4]) // CHECK: Works!
{
	uint8_t i, j;
	for (i = 0; i < 4; ++i)
	{
		for (j = 0; j < 4; ++j)
		{
			//cout << "SubBox[" << (int)state[i][j] << "] = " << (int)getSBoxValue(state[i][j]) << endl;
			state[i][j] = getSBoxValue(state[i][j]);
		}
	}
}

__device__
void InvSubBytes(STATE state[4][4]) // CHECK: not tested but it probably works
{
	uint8_t i, j;
	for (i = 0; i < 4; ++i)
	{
		for (j = 0; j < 4; ++j)
		{
			//cout << "SubBox[" << (int)state[i][j] << "] = " << (int)getSBoxValue(state[i][j]) << endl;
			state[i][j] = getRSBoxValue(state[i][j]);
		}
	}
}

__device__
void ShiftRows(STATE state[4][4]) // CHECK: Works!
{
	uint8_t temp;

	// Rotate first row 0 columns to left
	// DO NOTHING

	// Rotate first row 1 columns to left  
	temp = state[1][0];
	state[1][0] = state[1][1];
	state[1][1] = state[1][2];
	state[1][2] = state[1][3];
	state[1][3] = temp;

	// Rotate second row 2 columns to left  
	temp = state[2][0];
	state[2][0] = state[2][2];
	state[2][2] = temp;

	temp = state[2][1];
	state[2][1] = state[2][3];
	state[2][3] = temp;

	// Rotate third row 3 columns to left
	temp = state[3][0];
	state[3][0] = state[3][3];
	state[3][3] = state[3][2];
	state[3][2] = state[3][1];
	state[3][1] = temp;
}

__device__
void InvShiftRows(STATE state[4][4]) // CHECK: Probably works!
{
	uint8_t temp;

	// Rotate first row 0 columns to left
	// DO NOTHING

	// Rotate first row 1 columns to left  
	temp = state[1][3];
	state[1][3] = state[1][2];
	state[1][2] = state[1][1];
	state[1][1] = state[1][0];
	state[1][0] = temp;

	// Rotate second row 2 columns to left  
	temp = state[2][0];
	state[2][0] = state[2][2];
	state[2][2] = temp;

	temp = state[2][1];
	state[2][1] = state[2][3];
	state[2][3] = temp;

	// Rotate third row 3 columns to left
	temp = state[3][0];
	state[3][0] = state[3][1];
	state[3][1] = state[3][2];
	state[3][2] = state[3][3];
	state[3][3] = temp;
}

__device__
int gf2n_multiply(int a, int b) // CHECK: Works!
{
	int sum = 0;
	while (b > 0) {
		if (b & 1) sum = sum ^ a;             // if last bit of b is 1, add a to the sum
		b = b >> 1;                           // divide b by 2, discarding the last bit
		a = a << 1;                           // multiply a by 2
		if (a & 0x100) a = a ^ 0x11B;		  // reduce a modulo the AES polynomial. overflow = 0x100, modulus = 0x11B (AES GF(2^8) representation)
	}
	return sum;
}

__device__
void MixColumns(STATE state[4][4]) // CHECK: Works!
{
	// use gf2n_multiply() function to multiply two numbers and then XOR using ^ operator
	int i, j;
	STATE temp[4][4];
	/*
	for (i = 0; i < 4; i++) {
	for (j = 0; j < 4; j++)
	{
	state[i][j] ^= gf2n_multiply(mixcolumnbox[i][j], state[j][i]);
	}
	}*/

	for (i = 0; i < 4; i++) {
		for (j = 0; j < 4; j++)
		{
			temp[i][j] = state[i][j];
		}
	}

	for (j = 0; j < 4; j++) {
		state[0][j] = gf2n_multiply(0x2, temp[0][j]) ^ gf2n_multiply(0x3, temp[1][j]) ^ temp[2][j] ^ temp[3][j];
		state[1][j] = temp[0][j] ^ gf2n_multiply(0x2, temp[1][j]) ^ gf2n_multiply(0x3, temp[2][j]) ^ temp[3][j];
		state[2][j] = temp[0][j] ^ temp[1][j] ^ gf2n_multiply(0x2, temp[2][j]) ^ gf2n_multiply(0x3, temp[3][j]);
		state[3][j] = gf2n_multiply(0x3, temp[0][j]) ^ temp[1][j] ^ temp[2][j] ^ gf2n_multiply(0x2, temp[3][j]);
	}
}

__device__
void InvMixColumns(STATE state[4][4]) // CHECK: Works!
{
	// use gf2n_multiply() function to multiply two numbers and then XOR using ^ operator
	int i, j;
	STATE temp[4][4];
	/*
	for (i = 0; i < 4; i++) {
	for (j = 0; j < 4; j++)
	{
	state[i][j] ^= gf2n_multiply(mixcolumnbox[i][j], state[j][i]);
	}
	}*/

	for (i = 0; i < 4; i++) {
		for (j = 0; j < 4; j++)
		{
			temp[i][j] = state[i][j];
		}
	}

	for (j = 0; j < 4; j++) {
		state[0][j] = gf2n_multiply(0x0e, temp[0][j]) ^ gf2n_multiply(0x0b, temp[1][j]) ^ gf2n_multiply(0x0d, temp[2][j]) ^ gf2n_multiply(0x09, temp[3][j]);
		state[1][j] = gf2n_multiply(0x09, temp[0][j]) ^ gf2n_multiply(0x0e, temp[1][j]) ^ gf2n_multiply(0x0b, temp[2][j]) ^ gf2n_multiply(0x0d, temp[3][j]);
		state[2][j] = gf2n_multiply(0x0d, temp[0][j]) ^ gf2n_multiply(0x09, temp[1][j]) ^ gf2n_multiply(0x0e, temp[2][j]) ^ gf2n_multiply(0x0b, temp[3][j]);
		state[3][j] = gf2n_multiply(0x0b, temp[0][j]) ^ gf2n_multiply(0x0d, temp[1][j]) ^ gf2n_multiply(0x09, temp[2][j]) ^ gf2n_multiply(0x0e, temp[3][j]);
	}
}

__device__
void BlockToState(BYTE InBlock[16], BYTE State[4][4])
{
	for (int i = 0; i < 16; i++)
	{
		State[(int)i % 4][(int)i / 4] = InBlock[(int)i];
	}
}

__device__
void StateToBlock(BYTE OutBlock[16], BYTE State[4][4])
{
	for (int i = 0; i < 16; i++)
	{
		OutBlock[(int)i] = State[(int)i % 4][(int)i / 4];
	}
}

__device__
void AddRoundKey(STATE state[4][4], int Round, BYTE* KEYWORD) // CHECK: WORKS
{
	int KeyIndex = 0;
	for (int i = 0; i < 4; i++) {
		for (int j = 0; j < 4; j++)
		{
			KeyIndex = (4 * i + j) + (16 * Round);
			state[j][i] = state[j][i] ^ KEYWORD[KeyIndex];
		}
	}
}

__device__
void GetT(BYTE T[4], int round, BYTE* KEYWORD) // CHECK: Works!
{
	// get the previous word
	T[0] = KEYWORD[round * 16 - 4];
	T[1] = KEYWORD[round * 16 - 3];
	T[2] = KEYWORD[round * 16 - 2];
	T[3] = KEYWORD[round * 16 - 1];

	// roatate the word
	BYTE temp = T[0];
	T[0] = T[1];
	T[1] = T[2];
	T[2] = T[3];
	T[3] = temp;

	// substitute the word
	T[0] = getSBoxValue(T[0]);
	T[1] = getSBoxValue(T[1]);
	T[2] = getSBoxValue(T[2]);
	T[3] = getSBoxValue(T[3]);

	// XOR with RCon
	T[0] = T[0] ^ RCon[(round - 1) * 4 + 0];
	T[1] = T[1] ^ RCon[(round - 1) * 4 + 1]; // unnecessary b/c 2nd value is zero in RCon chart
	T[2] = T[2] ^ RCon[(round - 1) * 4 + 2]; // unnecessary b/c 3rd value is zero in RCon chart
	T[3] = T[3] ^ RCon[(round - 1) * 4 + 3]; // unnecessary b/c 4th value is zero in RCon chart
}

__device__
void KeyExpansion(BYTE* KEY, BYTE* KEYWORD) // CHECK: Works!
{
	BYTE T[4];

	// Pre-round key generation
	for (int i = 0; i < 16; i++) {
		KEYWORD[i] = KEY[i];
	}

	// Round keys generation starting from 1 to 10
	for (int i = 16; i < 176; i += 4) {

		// every fourth round
		if (i % 16 == 0)
		{
			GetT(T, i / 16, KEYWORD);
			KEYWORD[i + 0] = KEYWORD[i + 0 - 16] ^ T[0];
			KEYWORD[i + 1] = KEYWORD[i + 1 - 16] ^ T[1];
			KEYWORD[i + 2] = KEYWORD[i + 2 - 16] ^ T[2];
			KEYWORD[i + 3] = KEYWORD[i + 3 - 16] ^ T[3];
		}
		// every other round
		else
		{
			KEYWORD[i + 0] = KEYWORD[i + 0 - 4] ^ KEYWORD[i + 0 - 16];
			KEYWORD[i + 1] = KEYWORD[i + 1 - 4] ^ KEYWORD[i + 1 - 16];
			KEYWORD[i + 2] = KEYWORD[i + 2 - 4] ^ KEYWORD[i + 2 - 16];
			KEYWORD[i + 3] = KEYWORD[i + 3 - 4] ^ KEYWORD[i + 3 - 16];
		}

	}
}

__device__
void AES_Encrypt(STATE InBlock[16], STATE OutBlock[16], BYTE* KEY, BYTE* KEYWORD)
{
	STATE State[4][4];
	BlockToState(InBlock, State);

	//cout << "\n 0 - Input State: \n";
	//DEBUG_PRINT_STATE(State);

	AddRoundKey(State, 0, KEYWORD); // pre round key

									//cout << "\n 0 - Output State: \n";
									//DEBUG_PRINT_STATE(State);

	for (int round = 1; round <= 10; round++)
	{

		//cout << "\n" << round << " - Input State: \n";
		//DEBUG_PRINT_STATE(State);

		SubBytes(State);
		ShiftRows(State);
		if (round != 10)
			MixColumns(State);
		AddRoundKey(State, round, KEYWORD);
		/*
		cout << "\n" << round << " - Output State: \n";
		DEBUG_PRINT_STATE(State);

		system("pause");*/
	}

	StateToBlock(OutBlock, State);
}

__device__
void AES_Decrypt(BYTE* InBlock, BYTE* OutBlock, BYTE* KEY, BYTE* KEYWORD)
{
	KeyExpansion(KEY, KEYWORD);

	/*for (int i = 0; i < 176; i++) {
	if (i % 4 == 0) printf("  ");
	if (i % 16 == 0) printf("\n");
	printf("%d, ", KEYWORD[i]);
	}*/

	//for (int i = 0; i < 16; i++) {
	//	//cout << hex << setw(3) << (int)(Inblock[i]);
	//	printf("%d", InBlock[i]);
	//}


	STATE State[4][4];
	BlockToState(InBlock, State);

	//cout << "\n 0 - Input State: \n";
	//DEBUG_PRINT_STATE(State);

	AddRoundKey(State, 10, KEYWORD); // pre round key

									 //cout << "\n 0 - Output State: \n";
									 //DEBUG_PRINT_STATE(State);

	for (int round = 9; round >= 0; round--)
	{

		//cout << "\n" << round << " - Input State: \n";
		//DEBUG_PRINT_STATE(State);

		InvShiftRows(State);
		InvSubBytes(State);
		AddRoundKey(State, round, KEYWORD);
		if (round != 0)
			InvMixColumns(State);
		/*
		cout << "\n" << round << " - Output State: \n";
		DEBUG_PRINT_STATE(State);

		system("pause");*/
	}

	StateToBlock(OutBlock, State);
}

__device__
bool isPlainText(BYTE* encryptedText, char* text)
{
	int textLen = 16;
	int counter = 0;
	for (int z = 0; z < 16; z++) {
		if (encryptedText[z] == text[z])
		{
			//printf("\nPosition: %d EncryptedText = %d + text = %d", z, encryptedText[z], text[z]);
			counter++;
		}
		else {
			break;
		}
	}
	if (counter == textLen) return true;
	else return false;
}

__device__
bool isPlainText(BYTE* x, int n, char* Dictionary, int &startPlace) 
{ 
	int l = 0; 
	int r = n - 1; 
  int i = 0;
	int res;
	int m;

	while (l <= r) 
	{ 
		m = l + (r - l) / 2; 
 
  for (i = 0; i < 16; i++){
    //printf("At m = %d: checking X = %c against Dictionary = %c\n", m, x[i], Dictionary[Lenght_of_Words * m + i]);
		if (x[i] == Dictionary[Lenght_of_Words * m + i]) 
			res = 0;

    //if ('\n' == Dictionary[Lenght_of_Words * m + i]) {
     // printf("checking %c == '$'\n", Dictionary[Lenght_of_Words * m + i]);
      //res = 0;
   //}

    else { 
      res = 1;
      break;
    }
  }

			// Check if x is present at mid 
			if (res == 0) {
				startPlace = (Lenght_of_Words * m + i) - 16;
				return true; 
			}

			// If x greater, ignore left half 
			if (x[i] > (Dictionary[Lenght_of_Words * m + i])) 
				l = m + 1; 

			// If x is smaller, ignore right half 
			else
				r = m - 1; 
		} 

		if (res == 1){
				startPlace = (Lenght_of_Words * m + i) - 16;
				return false; 
		}
		else {
				startPlace = (Lenght_of_Words * m + i) - 16;
				return true;
		}
} 

__device__
int mod(BYTE base, int exponent, int modulus)
{
	int exponentBuffer = exponent;
	int modulusBuffer = modulus;

	int result = 1;
	while (exponent > 0) {
		if (exponent % 2 == 1)
			result = (result * base) % modulus;
		exponent = exponent >> 1;
		base = (base * base) % modulus;
	}
	//cout << "  " << result;
	base = result;
	exponent = exponentBuffer;
	modulus = modulusBuffer;

	return result;
}

__device__
void uniqueKey(BYTE* KEY, BYTE* UniqueKey, unsigned long ID, unsigned long NumberOfTries, int* Bit_Position)
{
		
	// For every 8 bit block added, another statment will be added following the pattern above.
	// i.e keep adding more "* 256" for every aditional block

	//for last 40 bits 
	//if (NumberOfTries > 4294967296) //256 * 256 * 256 * 256
	//{
	//	UniqueKey[Bit_Position[0]] = ID / (4294967296);
	//	if (UniqueKey[Bit_Position[0]] >= 256)
	//		UniqueKey[Bit_Position[0]] %= 256;
	//}

	// for last 32 bits 
	if (NumberOfTries > 16777216) //256 * 256 * 256
	{
		UniqueKey[Bit_Position[0]] = ID / (16777216);
		if (UniqueKey[Bit_Position[0]] >= 256)
			UniqueKey[Bit_Position[0]] %= 256;
	}

	// for last 24 bits
	if (NumberOfTries > 65536) //256 * 256
  {
		UniqueKey[Bit_Position[1]] = ID / (65536);
		if (UniqueKey[Bit_Position[1]] >= 256)
			UniqueKey[Bit_Position[1]] %= 256;
	}

	// for last 16 bits
	if (NumberOfTries > 256) {
		UniqueKey[Bit_Position[2]] = ID / 256;
		if (UniqueKey[Bit_Position[2]] >= 256)
			UniqueKey[Bit_Position[2]] %= 256;
	}

	// for last 8 bits
	if (NumberOfTries > 0) {
		UniqueKey[Bit_Position[3]] = ID % 256;
	}
	
}

__global__
void Brute_AES_Decrypt(BYTE* Inblock, BYTE* Outblock, BYTE* KEY, BYTE* KEYWORD, unsigned long NumberOfTries, int* Bit_Position, char* Dictionary)
{
	int i = blockIdx.x * blockDim.x + threadIdx.x;
	BYTE threadKEY[16];
	BYTE threadKEYWORD[176];
	BYTE threadOutblock[16];
	char text[17] = "is this working?";
	unsigned long eachThreadRuns = NumberOfTries / (GPUThreadsPerBlock * GPUBlocks);
	int looperForTries = 0;
	unsigned long tryNum = 0;
	int n = Number_of_Words; 
	int result;
	int startPlace = 0;
	

// if the number of time each thread is supposed to run is zero. So each thread runs atleast once.
	if (eachThreadRuns == 0) eachThreadRuns = 1;

	//if (i == 0) printf("eachThreadRuns = %d \n", eachThreadRuns);
	//if (i == 0) printf("NumberOfTries = %d \n", NumberOfTries);
	
	for (int j = 0; j < 16; j++) {
		threadKEY[j] = KEY[j];
	}

	for (int looperForTries = 0; looperForTries < eachThreadRuns; looperForTries++)
	{
		tryNum = eachThreadRuns * i;
		bool result;
		uniqueKey(KEY, threadKEY, tryNum + looperForTries, NumberOfTries, Bit_Position);

		AES_Decrypt(Inblock, threadOutblock, threadKEY, threadKEYWORD);

		if (Check_Dictionary)
			result = isPlainText(threadOutblock, n, Dictionary, startPlace);
		else
			result = isPlainText(threadOutblock, text);
		
		if(result)
		{
			if (Check_Dictionary) printf("\nWord found in file!\n");
			printf("\nKEY FOUND! Thread ID = %d", i);
			printf(" found key on Try Number %lu", tryNum + looperForTries);
			printf(" on its %d/%luth try", looperForTries, eachThreadRuns);
			printf("\n\nKEY is = ");
			if (Check_Dictionary){
					for (int j = 0; j < 16; j++) {
					Outblock[j] = Dictionary[startPlace + j];
					printf("%d ", threadKEY[j]);
				}
			}
			else {
				for (int j = 0; j < 16; j++) {
					Outblock[j] = threadOutblock[j];
					printf("%d ", threadKEY[j]);
				}
			}

		}
		//else printf("\n\nKEY NOT FOUND! Thread ID = %d", i);

	}

}

int main()
{
	
	BYTE Inblock[16] = { 34, 45, 236, 104, 63, 203, 176, 19, 101, 86, 155, 234, 113, 42, 178, 228 };
	BYTE Outblock[16] = {0};
	BYTE KEYWORD[176];
	BYTE KEY[16] = { 4, 92, 243, 96, 0, 12, 164, 0, 201, 176, 0, 45, 33, 87, 209, 219 }; // { 4, 92, 243, 96, 75, 12, 164, 98, 201, 176, 99, 45, 33, 87, 209, 219 };
	int Bit_Position[4] = {0, 4, 7, 10}; // first position being 0 and last being 15.
	char Dictionary[Number_of_Words][Lenght_of_Words];
	memset(Dictionary, '0', sizeof(char) * Number_of_Words * Lenght_of_Words);

	BYTE *d_Inblock;
	BYTE *d_Outblock;
	BYTE *d_KEYWORD;
	BYTE *d_KEY;
	int *d_Bit_Position;
  char *d_Dictionary;

	float time;
	cudaEvent_t start, stop;

	char text[16];
	if (Check_Dictionary){
 // Create a text string, which is used to output the text file
char myText[Lenght_of_Words];
memset(myText, '0', sizeof(char) * Lenght_of_Words);

// Read from the text file
ifstream MyReadFile("English_Words.txt");
 if (MyReadFile.is_open())
	cout << "File found!\n";
	else{
	cout << "File not found!\n";
	return 0;
	}

 	int i = 0;
	while(MyReadFile.getline(myText, Lenght_of_Words))
 //while(i <= Number_of_Words)
 {
	 	//MyReadFile.getline (myText, Lenght_of_Words);
		for(int j = 0; j <= Lenght_of_Words; j++)
			{
				Dictionary[i][j] = myText[j];
				//cout << Dictionary[i][j];
				//cout << myText[j];
			}
			memset(myText, '0', sizeof(char) * Lenght_of_Words);
			i++;
	//	cout << "\n";
 }

// Close the file
MyReadFile.close();
}

	unsigned long NumberOfTries = 16777216; //4294967296; //16777216;

	//cout << NumberOfTries;
	//cout << "KeyExpansion: \n";
	cout << "+ Actual Key:\n";
	cout << "INT: ";
	for (int i = 0; i < 16; i++) {
		printf("%d ", (int)(KEY[i]));
	}
	cout << "\nHEX: ";
	for (int i = 0; i < 16; i++) {
		printf("%02x ", (int)(KEY[i]));
	}

	BYTE temp_inblock[16];

	cudaMalloc((void**)&d_Inblock, 16 * sizeof(BYTE));
	cudaMalloc((void**)&d_Outblock, 16 * sizeof(BYTE));
	cudaMalloc((void**)&d_KEYWORD, 176 * sizeof(BYTE));
	cudaMalloc((void**)&d_KEY, 16 * sizeof(BYTE));
	cudaMalloc((void**)&d_Bit_Position, 5 * sizeof(int));
	cudaMalloc((void **)&d_Dictionary, Lenght_of_Words * Number_of_Words * sizeof(char));

	cudaMemcpy(d_Inblock, Inblock, 16 * sizeof(BYTE), cudaMemcpyHostToDevice);
	cudaMemcpy(d_Outblock, Outblock, 16 * sizeof(BYTE), cudaMemcpyHostToDevice);
	cudaMemcpy(d_KEYWORD, KEYWORD, 176 * sizeof(BYTE), cudaMemcpyHostToDevice);
	cudaMemcpy(d_KEY, KEY, 16 * sizeof(BYTE), cudaMemcpyHostToDevice);
	cudaMemcpy(d_Bit_Position, Bit_Position, 5 * sizeof(int), cudaMemcpyHostToDevice);
	cudaMemcpy(d_Dictionary, Dictionary, Lenght_of_Words * Number_of_Words * sizeof(char), cudaMemcpyHostToDevice);

	cout << "\n\n------------- Brute forcing with the GPU now ------------- \n\n";
	cudaEventCreate(&start);
	cudaEventCreate(&stop);
	cudaEventRecord(start, 0);
	Brute_AES_Decrypt <<<GPUBlocks, GPUThreadsPerBlock >>> (d_Inblock, d_Outblock, d_KEY, d_KEYWORD, NumberOfTries, d_Bit_Position, d_Dictionary);
	cudaEventRecord(stop, 0);
	cudaEventSynchronize(stop);
	cudaEventElapsedTime(&time, start, stop);

	cudaMemcpy(Outblock, d_Outblock, 16 * sizeof(BYTE), cudaMemcpyDeviceToHost);

	printf("\nKernal Call Message: %s\n", cudaGetErrorString(cudaGetLastError()));

	cout << "\n\n+ Plaintext (After Decryption):\n\n";
	cout << "INT: ";
	for (int i = 0; i < 16; i++) {
		//cout << hex << setw(3) << (int)(Inblock[i]);
		cout << (int)(Outblock[i]) << " ";
	}
	cout << "\nCHAR: ";
	for (int i = 0; i < 16; i++) {
		//cout << hex << setw(3) << (int)(Inblock[i]);
		cout << (char)(Outblock[i]);
	}

	//cout << "Key not found!\n";

	cout << "\n\n";
	printf("Time to generate:  %3.1f ms \n", time);

	cudaFree(d_Inblock); cudaFree(d_Outblock); cudaFree(d_KEYWORD); cudaFree(d_KEY); cudaFree(d_Bit_Position);
	cudaFree(d_Dictionary);

	return 0;
}
